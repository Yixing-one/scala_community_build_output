[error] -- [E069] Naming Error: /Users/y3536zha/Desktop/scala_explicit_unsafe/scala_flexible_type_with_test_script/library/src/scala/IArray.scala:13:7 
[error] 13 |object IArray:
[error]    |       ^
[error] -- [E069] Naming Error: /Users/y3536zha/Desktop/scala_explicit_unsafe/scala_flexible_type_with_test_script/library/src/scala/IArray.scala:13:7 
[error] 13 |object IArray:
[error]    |object IArray cannot have the same name as object IArray in package scala -- cannot define object member with the same name as a object member in self reference _.
[error]    |       ^
[error]    |(Note: this can be resolved by using another name)
[error]    |object IArray cannot have the same name as object IArray in package scala -- cannot define object member with the same name as a object member in self reference _.
[error]    |(Note: this can be resolved by using another name)
[error] one error found
[error] one error found
[error] ## Exception when compiling 15 sources to /Users/y3536zha/Desktop/scala_explicit_unsafe/scala_flexible_type_with_test_script/community-build/community-projects/os-lib/out/os/jvm/3.3.1-RC1-bin-SNAPSHOT/test/compile.dest/classes
[error] java.lang.NoClassDefFoundError: dotty/tools/dotc/Run$
[error] dotty.tools.dotc.Driver.doCompile(Driver.scala:45)
[error] dotty.tools.xsbt.CompilerBridgeDriver.run(CompilerBridgeDriver.java:88)
[error] dotty.tools.xsbt.CompilerBridge.run(CompilerBridge.java:22)
[error] sbt.internal.inc.AnalyzingCompiler.compile(AnalyzingCompiler.scala:91)
[error] sbt.internal.inc.MixedAnalyzingCompiler.$anonfun$compile$7(MixedAnalyzingCompiler.scala:192)
[error] scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
[error] sbt.internal.inc.MixedAnalyzingCompiler.timed(MixedAnalyzingCompiler.scala:247)
[error] sbt.internal.inc.MixedAnalyzingCompiler.$anonfun$compile$4(MixedAnalyzingCompiler.scala:182)
[error] sbt.internal.inc.MixedAnalyzingCompiler.$anonfun$compile$4$adapted(MixedAnalyzingCompiler.scala:163)
[error] sbt.internal.inc.JarUtils$.withPreviousJar(JarUtils.scala:239)
[error] sbt.internal.inc.MixedAnalyzingCompiler.compileScala$1(MixedAnalyzingCompiler.scala:163)
[error] sbt.internal.inc.MixedAnalyzingCompiler.compile(MixedAnalyzingCompiler.scala:210)
[error] sbt.internal.inc.IncrementalCompilerImpl.$anonfun$compileInternal$1(IncrementalCompilerImpl.scala:528)
[error] sbt.internal.inc.IncrementalCompilerImpl.$anonfun$compileInternal$1$adapted(IncrementalCompilerImpl.scala:528)
[error] sbt.internal.inc.Incremental$.$anonfun$apply$5(Incremental.scala:177)
[error] sbt.internal.inc.Incremental$.$anonfun$apply$5$adapted(Incremental.scala:175)
[error] sbt.internal.inc.Incremental$$anon$2.run(Incremental.scala:461)
[error] sbt.internal.inc.IncrementalCommon$CycleState.next(IncrementalCommon.scala:116)
[error] sbt.internal.inc.IncrementalCommon$$anon$1.next(IncrementalCommon.scala:56)
[error] sbt.internal.inc.IncrementalCommon$$anon$1.next(IncrementalCommon.scala:52)
[error] sbt.internal.inc.IncrementalCommon.cycle(IncrementalCommon.scala:263)
[error] sbt.internal.inc.Incremental$.$anonfun$incrementalCompile$8(Incremental.scala:416)
[error] sbt.internal.inc.Incremental$.withClassfileManager(Incremental.scala:503)
[error] sbt.internal.inc.Incremental$.incrementalCompile(Incremental.scala:403)
[error] sbt.internal.inc.Incremental$.apply(Incremental.scala:169)
[error] sbt.internal.inc.IncrementalCompilerImpl.compileInternal(IncrementalCompilerImpl.scala:528)
[error] sbt.internal.inc.IncrementalCompilerImpl.$anonfun$compileIncrementally$1(IncrementalCompilerImpl.scala:482)
[error] sbt.internal.inc.IncrementalCompilerImpl.handleCompilationError(IncrementalCompilerImpl.scala:332)
[error] sbt.internal.inc.IncrementalCompilerImpl.compileIncrementally(IncrementalCompilerImpl.scala:420)
[error] sbt.internal.inc.IncrementalCompilerImpl.compile(IncrementalCompilerImpl.scala:137)
[error] mill.scalalib.worker.ZincWorkerImpl.compileInternal(ZincWorkerImpl.scala:545)
[error] mill.scalalib.worker.ZincWorkerImpl.$anonfun$compileMixed0$1(ZincWorkerImpl.scala:317)
[error] mill.api.FixSizedCache.withCachedValue(FixSizedCache.scala:66)
[error] mill.scalalib.worker.ZincWorkerImpl.withCompilers(ZincWorkerImpl.scala:399)
[error] mill.scalalib.worker.ZincWorkerImpl.compileMixed0(ZincWorkerImpl.scala:316)
[error] mill.scalalib.worker.ZincWorkerImpl.compileMixed(ZincWorkerImpl.scala:284)
[error] mill.scalalib.ScalaModule.$anonfun$compile$2(ScalaModule.scala:195)
[error] mill.define.Task$TraverseCtx.evaluate(Task.scala:380)
[error] mill.eval.Evaluator.$anonfun$evaluateGroup$13(Evaluator.scala:627)
[error] scala.util.DynamicVariable.withValue(DynamicVariable.scala:59)
[error] scala.Console$.withErr(Console.scala:193)
[error] mill.eval.Evaluator.$anonfun$evaluateGroup$12(Evaluator.scala:627)
[error] scala.util.DynamicVariable.withValue(DynamicVariable.scala:59)
[error] scala.Console$.withOut(Console.scala:164)
[error] mill.eval.Evaluator.$anonfun$evaluateGroup$11(Evaluator.scala:626)
[error] scala.util.DynamicVariable.withValue(DynamicVariable.scala:59)
[error] scala.Console$.withIn(Console.scala:227)
[error] mill.eval.Evaluator.$anonfun$evaluateGroup$8(Evaluator.scala:625)
[error] mill.eval.Evaluator.$anonfun$evaluateGroup$8$adapted(Evaluator.scala:586)
[error] scala.collection.immutable.Vector.foreach(Vector.scala:1856)
[error] mill.eval.Evaluator.evaluateGroup(Evaluator.scala:586)
[error] mill.eval.Evaluator.$anonfun$evaluateGroupCached$21(Evaluator.scala:478)
[error] scala.util.DynamicVariable.withValue(DynamicVariable.scala:59)
[error] mill.eval.Evaluator.evaluateGroupCached(Evaluator.scala:469)
[error] mill.eval.Evaluator.$anonfun$sequentialEvaluate$2(Evaluator.scala:202)
[error] scala.collection.IterableOnceOps.foreach(IterableOnce.scala:563)
[error] scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:561)
[error] scala.collection.AbstractIterator.foreach(Iterator.scala:1293)
[error] mill.eval.Evaluator.sequentialEvaluate(Evaluator.scala:177)
[error] mill.eval.Evaluator.evaluate(Evaluator.scala:162)
[error] mill.main.RunScript$.evaluateNamed(RunScript.scala:364)
[error] mill.main.RunScript$.evaluate(RunScript.scala:349)
[error] mill.main.RunScript$.$anonfun$evaluateTasks$1(RunScript.scala:314)
[error] scala.util.Either.map(Either.scala:382)
[error] mill.main.RunScript$.evaluateTasks(RunScript.scala:312)
[error] mill.main.RunScript$.$anonfun$runScript$8(RunScript.scala:105)
[error] ammonite.util.Res$Success.flatMap(Res.scala:62)
[error] mill.main.RunScript$.runScript(RunScript.scala:104)
[error] mill.main.MainRunner.$anonfun$runScript$1(MainRunner.scala:119)
[error] mill.main.MainRunner.watchLoop2(MainRunner.scala:67)
[error] mill.main.MainRunner.runScript(MainRunner.scala:92)
[error] mill.MillMain$.main0(MillMain.scala:310)
[error] mill.MillMain$.main(MillMain.scala:52)
[error] mill.MillMain.main(MillMain.scala)
[error] java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[error] java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
[error] java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
[error] java.base/java.lang.reflect.Method.invoke(Unknown Source)
[error] mill.main.client.IsolatedMillMainLoader.runMain(IsolatedMillMainLoader.java:58)
[error] mill.main.client.MillClientMain.main(MillClientMain.java:67)
[error]            
[error] -- Error: /Users/y3536zha/Desktop/scala_explicit_unsafe/scala_flexible_type_with_test_script/community-build/community-projects/os-lib/os/test/src-jvm/ExampleTests.scala:8:20 
[error]   8 |  val tests = Tests {
[error]     |              ^
[error]     |              error while loading JProcedure1,
[error]     |              ZipFile invalid LOC header (bad signature)
[error]   9 |    test("splash") - TestUtil.prep{wd => if (Unix()){
[error]  10 |      // Make sure working directory exists and is empty
[error]  11 |      val wd = os.pwd/"out"/"splash"
[error]  12 |      os.remove.all(wd)
[error]  13 |      os.makeDir.all(wd)
[error]  14 |      os.write(wd/"file.txt", "hello")
[error]  15 |      os.read(wd/"file.txt") ==> "hello"
[error]  16 |      os.copy(wd/"file.txt", wd/"copied.txt")
[error]  17 |      os.list(wd) ==> Seq(wd/"copied.txt", wd/"file.txt")
[error]  18 |      val invoked = os.proc("cat", wd/"file.txt", wd/"copied.txt").call(cwd = wd)
[error]  19 |      invoked.out.trim() ==> "hellohello"
[error]  20 |      val curl = os.proc("curl", "-L" , "https://git.io/fpfTs").spawn(stderr = os.Inherit)
[error]  21 |      val gzip = os.proc("gzip", "-n").spawn(stdin = curl.stdout)
[error]  22 |      val sha = os.proc("shasum", "-a", "256").spawn(stdin = gzip.stdout)
[error]  23 |      sha.stdout.trim() ==> "acc142175fa520a1cb2be5b97cbbe9bea092e8bba3fe2e95afa645615908229e  -"
[error]  24 |    }}
[error]  25 |    test("concatTxt") - TestUtil.prep{wd =>
[error]  26 |      // Find and concatenate all .txt files directly in the working directory
[error]  27 |      os.write(
[error]  28 |        wd/"all.txt",
[error]  29 |        os.list(wd).filter(_.ext == "txt").map(os.read)
[error]  30 |      )
[error]  31 |      os.read(wd/"all.txt") ==>
[error]  32 |        """I am cowI am cow
[error]  33 |          |Hear me moo
[error]  34 |          |I weigh twice as much as you
[error]  35 |          |And I look good on the barbecue""".stripMargin
[error]  36 |    }
[error]  37 |    test("subprocessConcat") - TestUtil.prep{wd =>
[error]  38 |      val catCmd = if(scala.util.Properties.isWin) "type" else "cat"
[error]  39 |      // Find and concatenate all .txt files directly in the working directory
[error]  40 |      TestUtil.proc(catCmd, os.list(wd).filter(_.ext == "txt"))
[error]  41 |        .call(stdout = wd/"all.txt")
[error]  42 |      os.read(wd/"all.txt") ==>
[error]  43 |        """I am cowI am cow
[error]  44 |          |Hear me moo
[error]  45 |          |I weigh twice as much as you
[error]  46 |          |And I look good on the barbecue""".stripMargin
[error]  47 |    }
[error]  48 |    test("curlToTempFile") - TestUtil.prep{wd => if (Unix()){
[error]  49 |      // Curl to temporary file
[error]  50 |      val temp = os.temp()
[error]  51 |      os.proc("curl", "-L" , "https://git.io/fpfTs")
[error]  52 |        .call(stdout = temp)
[error]  53 |      os.size(temp) ==> 53814
[error]  54 |      // Curl to temporary file
[error]  55 |      val temp2 = os.temp()
[error]  56 |      val proc = os.proc("curl", "-L" , "https://git.io/fpfTs").spawn()
[error]  57 |      os.write.over(temp2, proc.stdout)
[error]  58 |      os.size(temp2) ==> 53814
[error]  59 |    }}
[error]  60 |    test("lineCount") - TestUtil.prep{wd =>
[error]  61 |      // Line-count of all .txt files recursively in wd
[error]  62 |      val lineCount = os.walk(wd)
[error]  63 |        .filter(_.ext == "txt")
[error]  64 |        .map(os.read.lines)
[error]  65 |        .map(_.size)
[error]  66 |        .sum
[error]  67 |      lineCount ==> 9
[error]  68 |    }
[error]  69 |    test("largestThree") - TestUtil.prep{ wd =>
[error]  70 |      // Find the largest three files in the given folder tree
[error]  71 |      val largestThree = os.walk(wd)
[error]  72 |        .filter(os.isFile(_, followLinks = false))
[error]  73 |        .map(x => os.size(x) -> x).sortBy(-_._1)
[error]  74 |        .take(3)
[error]  75 |      // on unix it is 81 bytes, win adds 3 bytes (3 \r characters)
[error]  76 |      val multilineSizes = Set[Long](81, 84)
[error]  77 |      assert(multilineSizes contains os.stat(wd / "Multi Line.txt").size)
[error]  78 |      // ignore multiline (second file) because its size varies
[error]  79 |      largestThree.filterNot(_._2.last == "Multi Line.txt") ==> Seq(
[error]  80 |        (711, wd / "misc" / "binary.png"),
[error]  81 |        (22, wd / "folder1" / "one.txt")
[error]  82 |      )
[error]  83 |    }
[error]  84 |    test("moveOut") - TestUtil.prep{ wd =>
[error]  85 |      // Move all files inside the "misc" folder out of it
[error]  86 |      import os.{GlobSyntax, /}
[error]  87 |      os.list(wd/"misc").map(os.move.matching{case p/"misc"/x => p/x })
[error]  88 |    }
[error]  89 |    test("frequency") - TestUtil.prep{ wd =>
[error]  90 |      // Calculate the word frequency of all the text files in the folder tree
[error]  91 |      def txt = os.walk(wd).filter(_.ext == "txt").map(os.read)
[error]  92 |      def freq(s: Seq[String]) = s.groupBy(x => x).mapValues(_.length).toSeq
[error]  93 |      val map = freq(txt.flatMap(_.split("[^a-zA-Z0-9_]"))).sortBy(-_._2)
[error]  94 |      map
[error]  95 |    }
[error]  96 |    test("comparison"){
[error]  97 |      os.remove.all(os.pwd/"out"/"scratch"/"folder"/"thing"/"file")
[error]  98 |      os.write(os.pwd/"out"/"scratch"/"folder"/"thing"/"file", "Hello!", createFolders = true)
[error]  99 |      def removeAll(path: String) = {
[error] 100 |        def getRecursively(f: java.io.File): Seq[java.io.File] = {
[error] 101 |          f.listFiles.filter(_.isDirectory).flatMap(getRecursively) ++ f.listFiles
[error] 102 |        }
[error] 103 |        getRecursively(new java.io.File(path)).foreach{f =>
[error] 104 |          println(f)
[error] 105 |          if (!f.delete())
[error] 106 |            throw new RuntimeException("Failed to delete " + f.getAbsolutePath)
[error] 107 |        }
[error] 108 |        new java.io.File(path).delete
[error] 109 |      }
[error] 110 |      removeAll("out/scratch/folder/thing")
[error] 111 |      assert(os.list(os.pwd/"out"/"scratch"/"folder").toSeq == Nil)
[error] 112 |      os.write(os.pwd/"out"/"scratch"/"folder"/"thing"/"file", "Hello!", createFolders = true)
[error] 113 |      os.remove.all(os.pwd/"out"/"scratch"/"folder"/"thing")
[error] 114 |      assert(os.list(os.pwd/"out"/"scratch"/"folder").toSeq == Nil)
[error] 115 |    }
[error] 116 |    test("constructingPaths"){
[error] 117 |      // Get the process' Current Working Directory. As a convention
[error] 118 |      // the directory that "this" code cares about (which may differ
[error] 119 |      // from the pwd) is called `wd`
[error] 120 |      val wd = os.pwd
[error] 121 |      // A path nested inside `wd`
[error] 122 |      wd/"folder"/"file"
[error] 123 |      // A path starting from the root
[error] 124 |      os.root/"folder"/"file"
[error] 125 |      // A path with spaces or other special characters
[error] 126 |      wd/"My Folder"/"My File.txt"
[error] 127 |      // Up one level from the wd
[error] 128 |      wd/os.up
[error] 129 |      // Up two levels from the wd
[error] 130 |      wd/os.up/os.up
[error] 131 |    }
[error] 132 |    test("newPath"){
[error] 133 |      val target = os.pwd/"out"/"scratch"
[error] 134 |    }
[error] 135 |    test("relPaths"){
[error] 136 |      // The path "folder/file"
[error] 137 |      val rel1 = os.rel/"folder"/"file"
[error] 138 |      val rel2 = os.rel/"folder"/"file"
[error] 139 |      // The relative difference between two paths
[error] 140 |      val target = os.pwd/"out"/"scratch"/"file"
[error] 141 |      assert((target relativeTo os.pwd) == os.rel/"out"/"scratch"/"file")
[error] 142 |      // `up`s get resolved automatically
[error] 143 |      val minus = os.pwd relativeTo target
[error] 144 |      val ups = os.up/os.up/os.up
[error] 145 |      assert(minus == ups)
[error] 146 |      rel1: os.RelPath
[error] 147 |      rel2: os.RelPath
[error] 148 |    }
[error] 149 |    test("subPaths"){
[error] 150 |      // The path "folder/file"
[error] 151 |      val sub1 = os.sub/"folder"/"file"
[error] 152 |      val sub2 = os.sub/"folder"/"file"
[error] 153 |      // The relative difference between two paths
[error] 154 |      val target = os.pwd/"out"/"scratch"/"file"
[error] 155 |      assert((target subRelativeTo os.pwd) == os.sub/"out"/"scratch"/"file")
[error] 156 |      // Converting os.RelPath to os.SubPath
[error] 157 |      val rel3 = os.rel/"folder"/"file"
[error] 158 |      val sub3 = rel3.asSubPath
[error] 159 |      // `up`s are not allowed in sub paths
[error] 160 |      intercept[Exception](os.pwd subRelativeTo target)
[error] 161 |    }
[error] 162 |    test("relSubPathEquality"){
[error] 163 |      assert(
[error] 164 |        (os.sub/"hello"/"world") == (os.rel/"hello"/"world"),
[error] 165 |        os.sub == os.rel
[error] 166 |      )
[error] 167 |    }
[error] 168 |    test("relPathCombine"){
[error] 169 |      val target = os.pwd/"out"/"scratch"/"file"
[error] 170 |      val rel = target relativeTo os.pwd
[error] 171 |      val newBase = os.root/"code"/"server"
[error] 172 |      assert(newBase/rel == os.root/"code"/"server"/"out"/"scratch"/"file")
[error] 173 |    }
[error] 174 |    test("subPathCombine"){
[error] 175 |      val target = os.pwd/"out"/"scratch"/"file"
[error] 176 |      val sub = target subRelativeTo os.pwd
[error] 177 |      val newBase = os.root/"code"/"server"
[error] 178 |      assert(
[error] 179 |        newBase/sub == os.root/"code"/"server"/"out"/"scratch"/"file",
[error] 180 |        sub / sub == os.sub/"out"/"scratch"/"file"/"out"/"scratch"/"file"
[error] 181 |      )
[error] 182 |    }
[error] 183 |    test("pathUp"){
[error] 184 |      val target = os.root/"out"/"scratch"/"file"
[error] 185 |      assert(target/os.up == os.root/"out"/"scratch")
[error] 186 |    }
[error] 187 |    test("relPathUp"){
[error] 188 |      val target = os.rel/"out"/"scratch"/"file"
[error] 189 |      assert(target/os.up == os.rel/"out"/"scratch")
[error] 190 |    }
[error] 191 |    test("relPathUp"){
[error] 192 |      val target = os.sub/"out"/"scratch"/"file"
[error] 193 |      assert(target/os.up == os.sub/"out"/"scratch")
[error] 194 |    }
[error] 195 |    test("canonical"){if (Unix()){
[error] 196 |      assert((os.root/"folder"/"file"/os.up).toString == "/folder")
[error] 197 |      // not "/folder/file/.."
[error] 198 |      assert((os.rel/"folder"/"file"/os.up).toString == "folder")
[error] 199 |      // not "folder/file/.."
[error] 200 |    }}
[error] 201 |    test("findWc"){
[error] 202 |      val wd = os.pwd/"os"/"test"/"resources"/"test"
[error] 203 |      // find . -name '*.txt' | xargs wc -l
[error] 204 |      val lines = os.walk(wd)
[error] 205 |        .filter(_.ext == "txt")
[error] 206 |        .map(os.read.lines)
[error] 207 |        .map(_.length)
[error] 208 |        .sum
[error] 209 |      assert(lines == 9)
[error] 210 |    }
[error] 211 |    test("Source code line length does not exceed 100"){
[error] 212 |      // Ensure that we don't have any Scala files in the current working directory
[error] 213 |      // which have lines more than 100 characters long, excluding generated sources
[error] 214 |      // in `src_managed` folders.
[error] 215 |      def longLines(p: os.Path) =
[error] 216 |        (p, os.read.lines(p).zipWithIndex.filter(_._1.length > 100).map(_._2))
[error] 217 |      val filesWithTooLongLines =
[error] 218 |        os.proc("git", "ls-files").call(cwd = os.pwd).out.lines()
[error] 219 |            .map(os.Path(_, os.pwd))
[error] 220 |            .filter(_.ext == "scala")
[error] 221 |            .map(longLines)
[error] 222 |            .filter(_._2.length > 0)
[error] 223 |            .filter(!_._1.segments.contains("src_managed"))
[error] 224 |      Predef.assert(filesWithTooLongLines.length == 0, filesWithTooLongLines)
[error] 225 |    }
[error] 226 |    test("rename"){
[error] 227 |//      val d1/"omg"/x1 = wd
[error] 228 |//      val d2/"omg"/x2 = wd
[error] 229 |//      ls! wd |? (_.ext == "scala") | (x => mv! x ! x.pref)
[error] 230 |    }
[error] 231 |    test("allSubpathsResolveCorrectly"){
[error] 232 |      for(abs <- os.walk(os.pwd)){
[error] 233 |        val rel = abs.relativeTo(os.pwd)
[error] 234 |        assert(rel.ups == 0)
[error] 235 |        assert(os.pwd / rel == abs)
[error] 236 |      }
[error] 237 |    }
[error] 238 |  }
[error] one error found
