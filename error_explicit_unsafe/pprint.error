[error] -- [E069] Naming Error: /Users/y3536zha/Desktop/scala_explicit_unsafe/scala_flexible_type_with_test_script/library/src/scala/IArray.scala:13:7 
[error] 13 |object IArray:
[error]    |       ^
[error]    |object IArray cannot have the same name as object IArray in package scala -- cannot define object member with the same name as a object member in self reference _.
[error]    |(Note: this can be resolved by using another name)
[error] one error found
[error] -- [E069] Naming Error: /Users/y3536zha/Desktop/scala_explicit_unsafe/scala_flexible_type_with_test_script/library/src/scala/IArray.scala:13:7 
[error] 13 |object IArray:
[error]    |       ^
[error]    |object IArray cannot have the same name as object IArray in package scala -- cannot define object member with the same name as a object member in self reference _.
[error]    |(Note: this can be resolved by using another name)
[error] one error found
[error] -- Error: /Users/y3536zha/Desktop/scala_explicit_unsafe/scala_flexible_type_with_test_script/community-build/community-projects/PPrint/pprint/test/src-3/test/src/pprint/HorizontalTests.scala:10:23 
[error]  10 |  val tests = TestSuite{
[error]     |              ^
[error]     |              error while loading JProcedure1,
[error]     |              ZipFile invalid LOC header (bad signature)
[error]  11 |    test("Horizontal"){
[error]  12 |      test("primitives"){
[error]  13 |        test("Unit"){
[error]  14 |          test - Check((), "()", "undefined")
[error]  15 |        }
[error]  16 |        test("Char"){
[error]  17 |          test - Check('\n', "'\\n'")
[error]  18 |          test - Check('a', "'a'")
[error]  19 |        }
[error]  20 |        test("Byte"){
[error]  21 |          test - Check(123.toByte, "123")
[error]  22 |          test - Check(-123.toByte, "-123")
[error]  23 |        }
[error]  24 |        test("Short"){
[error]  25 |          test - Check(123.toShort, "123")
[error]  26 |          test - Check(-12345.toShort, "-12345")
[error]  27 |        }
[error]  28 |        test("Int"){
[error]  29 |          test - Check(123, "123")
[error]  30 |          test - Check(-1234567, "-1234567")
[error]  31 |        }
[error]  32 |        test("Long"){
[error]  33 |          test - Check(123456789012345L, "123456789012345L")
[error]  34 |          test - Check(-123456789012345L, "-123456789012345L")
[error]  35 |        }
[error]  36 |        test("Float"){
[error]  37 |          test - Check(0.75F, "0.75F", "0.750000F")
[error]  38 |          test - Check(-13.5F, "-13.5F", "-13.500000F")
[error]  39 |        }
[error]  40 |        test("Double"){
[error]  41 |          test - Check(0.125, "0.125", "0.125F", "0.125000")
[error]  42 |          test - Check(-0.125, "-0.125", "-0.125F", "-0.125000")
[error]  43 |        }
[error]  44 |        test("String"){
[error]  45 |          val tq = "\"\"\""
[error]  46 |          test - Check("i am a cow", """ "i am a cow" """)
[error]  47 |          test - Check( """ "hello" """.trim, """ "\"hello\"" """.trim)
[error]  48 |          test - Check("\n", s"""
[error]  49 |          |$tq
[error]  50 |          |$tq
[error]  51 |          """.stripMargin)
[error]  52 |          test - Check("\n\n\n", s"""
[error]  53 |          |$tq
[error]  54 |          |
[error]  55 |          |
[error]  56 |          |$tq
[error]  57 |          """.stripMargin)
[error]  58 |          val n = 1000
[error]  59 |          test - Check(
[error]  60 |            "\n" + "ABCDEFG" * n,
[error]  61 |            "\"\"\"\n" + "ABCDEFG" * n + "\"\"\""
[error]  62 |          )
[error]  63 |        }
[error]  64 |      }
[error]  65 |      test("misc"){
[error]  66 |        test("Nothing") - intercept[Exception](Check(throw new Exception(), ""))
[error]  67 |        test("Null"){
[error]  68 |          Check(null, "null")
[error]  69 |          Check(null: String, "null")
[error]  70 |          Check(Seq("look!", null: String, "hi"), """List("look!", null, "hi")""")
[error]  71 |        }
[error]  72 |        test("Either"){
[error]  73 |          Check(Left(123): Either[Int, Int], "Left(123)")
[error]  74 |          Check(Left(123): Left[Int, Int], "Left(123)")
[error]  75 |          Check(Left(123), "Left(123)")
[error]  76 |          Check(Right((1, "2", 3)), """Right((1, "2", 3))""")
[error]  77 |        }
[error]  78 |        test("Options"){
[error]  79 |          Check(Some(123), "Some(123)")
[error]  80 |          Check(None: Option[Int], "None")
[error]  81 |          Check(None: Option[Nothing], "None")
[error]  82 |          Check(None, "None")
[error]  83 |          Check(Some(None), "Some(None)")
[error]  84 |        }
[error]  85 |        test("Default"){
[error]  86 |          val baos = new java.io.ByteArrayOutputStream()
[error]  87 |          Check(baos, baos.toString)
[error]  88 |        }
[error]  89 |      }
[error]  90 |      test("collections"){
[error]  91 |        // Fallback to toString
[error]  92 |        test("Iterator"){
[error]  93 |          Check(Iterator(), "empty iterator", "<iterator>")
[error]  94 |          Check(Iterator(1, 2, 3), "non-empty iterator", "<iterator>")
[error]  95 |          Check(Option(Iterator(1, 2, 3)), "Some(non-empty iterator)", "Some(<iterator>)")
[error]  96 |        }
[error]  97 |        test("Iterator") - Check(Iterable('1', '2', '3'), "List('1', '2', '3')")
[error]  98 |        test("Array") - Check(Array(1, 2, 3), "Array(1, 2, 3)")
[error]  99 |        test("Seq") - Check(Seq(1, 2, 3), "List(1, 2, 3)")
[error] 100 |        test("List") - Check(List("1", "2", "3"), """List("1", "2", "3")""")
[error] 101 |        test("Vector") - Check(Vector("omg", "wtf", "bbq"), """Vector("omg", "wtf", "bbq")""")
[error] 102 |        test("Buffer") - Check(
[error] 103 |          mutable.Buffer("omg", "wtf", "bbq"),
[error] 104 |          """ArrayBuffer("omg", "wtf", "bbq")""",
[error] 105 |          """WrappedArray("omg", "wtf", "bbq")"""
[error] 106 |        )
[error] 107 |        // Streams are hard-coded to always display vertically, in order
[error] 108 |        // to make streaming pretty-printing sane
[error] 109 |        test("LazyList") - Check(
[error] 110 |          LazyList("omg", "wtf", "bbq"),
[error] 111 |          """LazyList("omg", "wtf", "bbq")"""
[error] 112 |        )
[error] 113 |        test("Iterable") - Check(Iterable("omg", "wtf", "bbq"), """List("omg", "wtf", "bbq")""")
[error] 114 |        test("Set") - Check(Set("omg"), """Set("omg")""")
[error] 115 |        test("mutableSet") - Check(mutable.Set("omg"), """Set("omg")""", """HashSet("omg")""")
[error] 116 |        test("collectionSet") - Check(collection.Set("omg"), """Set("omg")""")
[error] 117 |        test("SortedSet") - Check(
[error] 118 |          imm.SortedSet("1", "2", "3"),
[error] 119 |          """TreeSet("1", "2", "3")""",
[error] 120 |          """Set("1", "2", "3")"""
[error] 121 |        )
[error] 122 |        test("Map"){
[error] 123 |          Check(Map("key" -> "value"), """Map("key" -> "value")""")
[error] 124 |        }
[error] 125 |        test("collectionMap"){
[error] 126 |          Check(Map("key" -> "value"): collection.Map[String, String], """Map("key" -> "value")""")
[error] 127 |        }
[error] 128 |        test("mutableMap"){
[error] 129 |          Check(
[error] 130 |            mutable.Map("key" -> "value"),
[error] 131 |            """Map("key" -> "value")""",
[error] 132 |            """HashMap("key" -> "value")"""
[error] 133 |          )
[error] 134 |        }
[error] 135 |        test("SortedMap") - Check(
[error] 136 |          imm.SortedMap("key" -> "v", "key2" -> "v2"),
[error] 137 |          """Map("key" -> "v", "key2" -> "v2")""",
[error] 138 |          """TreeMap("key" -> "v", "key2" -> "v2")"""
[error] 139 |        )
[error] 140 |      }
[error] 141 |      test("tuples"){
[error] 142 |        test("normal"){
[error] 143 |          Check(Tuple1("123"), """Tuple1("123")""")
[error] 144 |          Check((1, 2, "123"), """(1, 2, "123")""")
[error] 145 |          Check(
[error] 146 |            (1, 2, "123", (100L, 200L), 1.5F, 0.1),
[error] 147 |            """(1, 2, "123", (100L, 200L), 1.5F, 0.1)""",
[error] 148 |            """(1, 2, "123", (100L, 200L), 1.5F, 0.1F)""",
[error] 149 |            """(1, 2, "123", (100L, 200L), 1.500000F, 0.100000)"""
[error] 150 |          )
[error] 151 |        }
[error] 152 |        test("infix"){
[error] 153 |          case class ::(x: Any, y: Any)
[error] 154 |          Check(::(1, 2), "1 :: 2")
[error] 155 |          Check(::(0, ::(1, 2)), "0 :: 1 :: 2")
[error] 156 |        }
[error] 157 |      }
[error] 158 |    }
[error] 159 |  }
[error]     |---------------------------------------------------------------------------
[error]     |Inline stack trace
[error]     |- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[error]     |This location contains code that was inlined from Tracer.scala:102
[error]      ---------------------------------------------------------------------------
[error] one error found
